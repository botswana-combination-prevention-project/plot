# -*- coding: utf-8 -*-
# Generated by Django 1.10.4 on 2017-02-08 12:10
from __future__ import unicode_literals

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_crypto_fields.fields.encrypted_char_field
import django_crypto_fields.fields.encrypted_text_field
import django_revision.revision_field
import edc_base.model_fields.hostname_modification_field
import edc_base.model_fields.userfield
import edc_base.model_fields.uuid_auto_field
import edc_base.model_validators.date
import edc_base.utils
import edc_map.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='HistoricalPlot',
            fields=[
                ('created', models.DateTimeField(
                    blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(
                    blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(
                    blank=True, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(
                    blank=True, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default='mac2-2.local',
                                                      help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(
                    blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False,
                                                                          help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(
                    blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('gps_confirmed_latitude', models.DecimalField(
                    blank=True, decimal_places=15, max_digits=20, null=True, verbose_name='latitude')),
                ('gps_confirmed_longitude', models.DecimalField(
                    blank=True, decimal_places=15, max_digits=20, null=True, verbose_name='longitude')),
                ('gps_target_lat', models.DecimalField(blank=True, decimal_places=15,
                                                       default=0.0, max_digits=20, null=True, verbose_name='target waypoint latitude')),
                ('gps_target_lon', models.DecimalField(blank=True, decimal_places=15, default=0.0,
                                                       max_digits=20, null=True, verbose_name='target waypoint longitude')),
                ('target_radius', models.FloatField(
                    blank=True, default=0.025, help_text='km', null=True)),
                ('distance_from_target', models.FloatField(
                    editable=False, help_text='distance in meters', null=True)),
                ('map_area', models.CharField(
                    max_length=25, validators=[edc_map.validators.is_valid_map_area])),
                ('location_name', models.CharField(
                    blank=True, max_length=25, null=True)),
                ('confirmed', models.BooleanField(
                    default=False, editable=False, help_text='gps target is confirmed')),
                ('section', models.CharField(
                    editable=False, max_length=25, null=True, verbose_name='Section')),
                ('sub_section', models.CharField(
                    editable=False, max_length=25, null=True, verbose_name='Sub-section')),
                ('device_created', models.CharField(
                    blank=True, max_length=10)),
                ('device_modified', models.CharField(
                    blank=True, max_length=10)),
                ('htc', models.BooleanField(default=False, editable=False)),
                ('ess', models.BooleanField(
                    default=False, help_text='True if plot is part of ESS and outside of plots randomly selected')),
                ('rss', models.BooleanField(default=False, editable=False,
                                            help_text='True if plot is one of those randomly selected. See plot.selected')),
                ('selected', models.CharField(choices=[('1', 'twenty_percent'), ('2', 'five_percent')], editable=False,
                                              help_text='1=20% of selected plots, 2=additional 5% selected buffer/pool, None=75%', max_length=25, null=True, verbose_name='selected')),
                ('enrolled', models.BooleanField(
                    default=False, help_text='True indicates that plot is enrolled into a survey. Updated by bcpp_subject.subject_consent post_save')),
                ('enrolled_datetime', models.DateTimeField(
                    blank=True, help_text='datetime that plot is enrolled into BHS. Updated by bcpp_subject.subject_consent post_save', null=True)),
                ('plot_identifier', models.CharField(
                    db_index=True, editable=False, max_length=25, verbose_name='Plot Identifier')),
                ('household_count', models.IntegerField(default=0, help_text='Provide the number of households in this plot.', validators=[
                 django.core.validators.MaxValueValidator(9)], verbose_name='Number of Households on this plot.')),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, validators=[
                 edc_base.model_validators.date.datetime_not_future])),
                ('eligible_members', models.IntegerField(default=0, help_text='Provide an approximation of the number of people who live in this residence who are age eligible.',
                                                         null=True, verbose_name='Approximate number of age eligible members')),
                ('cso_number', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(
                    blank=True, help_text='provide the CSO number or leave BLANK. (Encryption: RSA local)', max_length=71, null=True, verbose_name='CSO Number')),
                ('time_of_week', models.CharField(blank=True, choices=[('weekdays', 'Weekdays'), ('weekends', 'Weekends'), (
                    'anytime', 'Anytime')], max_length=25, null=True, verbose_name='Time of week when most of the eligible members will be available')),
                ('time_of_day', models.CharField(blank=True, choices=[('morning', 'Morning'), ('afternoon', 'Afternoon'), ('evening', 'Evening'), (
                    'anytime', 'Anytime')], max_length=25, null=True, verbose_name='Time of day when most of the eligible members will be available')),
                ('status', models.CharField(choices=[('non_residential', 'non-residential'), ('residential_not_habitable', 'residential, not-habitable'), (
                    'residential_habitable', 'residential, habitable'), ('inaccessible', 'Inaccessible')], max_length=35, null=True, verbose_name='Plot status')),
                ('description', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(
                    blank=True, help_text=' (Encryption: AES local)', max_length=250, null=True, verbose_name='Description of plot/residence')),
                ('comment', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(
                    blank=True, help_text=' (Encryption: AES local)', max_length=250, null=True, verbose_name='Comment')),
                ('accessible', models.BooleanField(
                    default=True, editable=False)),
                ('access_attempts', models.IntegerField(default=0, editable=False,
                                                        help_text="Number of attempts to access a plot to determine it's status.")),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(
                    choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(
                    primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(
                    null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'ordering': ('-history_date', '-history_id'),
                'verbose_name': 'historical plot',
            },
        ),
        migrations.CreateModel(
            name='HistoricalPlotLog',
            fields=[
                ('created', models.DateTimeField(
                    blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(
                    blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(
                    blank=True, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(
                    blank=True, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default='mac2-2.local',
                                                      help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(
                    blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False,
                                                                          help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(
                    blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('report_datetime', models.DateTimeField(
                    default=edc_base.utils.get_utcnow, verbose_name='Report date')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(
                    choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(
                    primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(
                    null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'ordering': ('-history_date', '-history_id'),
                'verbose_name': 'historical plot log',
            },
        ),
        migrations.CreateModel(
            name='HistoricalPlotLogEntry',
            fields=[
                ('created', models.DateTimeField(
                    blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(
                    blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(
                    blank=True, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(
                    blank=True, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default='mac2-2.local',
                                                      help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(
                    blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False,
                                                                          help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(
                    blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, validators=[
                 edc_base.model_validators.date.datetime_not_future], verbose_name='Report date')),
                ('report_date', models.DateField(
                    editable=False, help_text='date value of report_datetime for unique constraint')),
                ('log_status', models.CharField(choices=[('accessible', 'Accessible'), (
                    'inaccessible', 'Inaccessible')], max_length=25, verbose_name='What is the status of this plot?')),
                ('reason', models.CharField(blank=True, choices=[('impassable_road', 'Road is impassable'), ('dogs', 'Dogs prevent access'), (
                    'locked_gate', 'Gate is locked'), ('OTHER', 'Other')], max_length=25, null=True, verbose_name='If inaccessible, please indicate the reason.')),
                ('reason_other', models.CharField(
                    blank=True, max_length=100, null=True, verbose_name='If Other, specify')),
                ('comment', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(
                    blank=True, help_text='IMPORTANT: Do not include any names or other personally identifying information in this comment (Encryption: AES local)', max_length=250, null=True, verbose_name='Comments')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(
                    choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(
                    primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(
                    null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'ordering': ('-history_date', '-history_id'),
                'verbose_name': 'historical plot log entry',
            },
        ),
        migrations.CreateModel(
            name='Plot',
            fields=[
                ('created', models.DateTimeField(
                    blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(
                    blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(
                    blank=True, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(
                    blank=True, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default='mac2-2.local',
                                                      help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(
                    blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False,
                                                                          help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False,
                                                                           help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('gps_confirmed_latitude', models.DecimalField(
                    blank=True, decimal_places=15, max_digits=20, null=True, verbose_name='latitude')),
                ('gps_confirmed_longitude', models.DecimalField(
                    blank=True, decimal_places=15, max_digits=20, null=True, verbose_name='longitude')),
                ('gps_target_lat', models.DecimalField(blank=True, decimal_places=15,
                                                       default=0.0, max_digits=20, null=True, verbose_name='target waypoint latitude')),
                ('gps_target_lon', models.DecimalField(blank=True, decimal_places=15, default=0.0,
                                                       max_digits=20, null=True, verbose_name='target waypoint longitude')),
                ('target_radius', models.FloatField(
                    blank=True, default=0.025, help_text='km', null=True)),
                ('distance_from_target', models.FloatField(
                    editable=False, help_text='distance in meters', null=True)),
                ('map_area', models.CharField(
                    max_length=25, validators=[edc_map.validators.is_valid_map_area])),
                ('location_name', models.CharField(
                    blank=True, max_length=25, null=True)),
                ('confirmed', models.BooleanField(
                    default=False, editable=False, help_text='gps target is confirmed')),
                ('section', models.CharField(
                    editable=False, max_length=25, null=True, verbose_name='Section')),
                ('sub_section', models.CharField(
                    editable=False, max_length=25, null=True, verbose_name='Sub-section')),
                ('device_created', models.CharField(
                    blank=True, max_length=10)),
                ('device_modified', models.CharField(
                    blank=True, max_length=10)),
                ('htc', models.BooleanField(default=False, editable=False)),
                ('ess', models.BooleanField(
                    default=False, help_text='True if plot is part of ESS and outside of plots randomly selected')),
                ('rss', models.BooleanField(default=False, editable=False,
                                            help_text='True if plot is one of those randomly selected. See plot.selected')),
                ('selected', models.CharField(choices=[('1', 'twenty_percent'), ('2', 'five_percent')], editable=False,
                                              help_text='1=20% of selected plots, 2=additional 5% selected buffer/pool, None=75%', max_length=25, null=True, verbose_name='selected')),
                ('enrolled', models.BooleanField(
                    default=False, help_text='True indicates that plot is enrolled into a survey. Updated by bcpp_subject.subject_consent post_save')),
                ('enrolled_datetime', models.DateTimeField(
                    blank=True, help_text='datetime that plot is enrolled into BHS. Updated by bcpp_subject.subject_consent post_save', null=True)),
                ('plot_identifier', models.CharField(
                    editable=False, max_length=25, unique=True, verbose_name='Plot Identifier')),
                ('household_count', models.IntegerField(default=0, help_text='Provide the number of households in this plot.', validators=[
                 django.core.validators.MaxValueValidator(9)], verbose_name='Number of Households on this plot.')),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, validators=[
                 edc_base.model_validators.date.datetime_not_future])),
                ('eligible_members', models.IntegerField(default=0, help_text='Provide an approximation of the number of people who live in this residence who are age eligible.',
                                                         null=True, verbose_name='Approximate number of age eligible members')),
                ('cso_number', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(
                    blank=True, help_text='provide the CSO number or leave BLANK. (Encryption: RSA local)', max_length=71, null=True, verbose_name='CSO Number')),
                ('time_of_week', models.CharField(blank=True, choices=[('weekdays', 'Weekdays'), ('weekends', 'Weekends'), (
                    'anytime', 'Anytime')], max_length=25, null=True, verbose_name='Time of week when most of the eligible members will be available')),
                ('time_of_day', models.CharField(blank=True, choices=[('morning', 'Morning'), ('afternoon', 'Afternoon'), ('evening', 'Evening'), (
                    'anytime', 'Anytime')], max_length=25, null=True, verbose_name='Time of day when most of the eligible members will be available')),
                ('status', models.CharField(choices=[('non_residential', 'non-residential'), ('residential_not_habitable', 'residential, not-habitable'), (
                    'residential_habitable', 'residential, habitable'), ('inaccessible', 'Inaccessible')], max_length=35, null=True, verbose_name='Plot status')),
                ('description', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(
                    blank=True, help_text=' (Encryption: AES local)', max_length=250, null=True, verbose_name='Description of plot/residence')),
                ('comment', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(
                    blank=True, help_text=' (Encryption: AES local)', max_length=250, null=True, verbose_name='Comment')),
                ('accessible', models.BooleanField(
                    default=True, editable=False)),
                ('access_attempts', models.IntegerField(default=0, editable=False,
                                                        help_text="Number of attempts to access a plot to determine it's status.")),
            ],
            options={
                'ordering': ['-plot_identifier'],
            },
        ),
        migrations.CreateModel(
            name='PlotLog',
            fields=[
                ('created', models.DateTimeField(
                    blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(
                    blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(
                    blank=True, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(
                    blank=True, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default='mac2-2.local',
                                                      help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(
                    blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False,
                                                                          help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False,
                                                                           help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('report_datetime', models.DateTimeField(
                    default=edc_base.utils.get_utcnow, verbose_name='Report date')),
                ('plot', models.OneToOneField(
                    on_delete=django.db.models.deletion.PROTECT, to='plot.Plot')),
            ],
        ),
        migrations.CreateModel(
            name='PlotLogEntry',
            fields=[
                ('created', models.DateTimeField(
                    blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(
                    blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(
                    blank=True, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(
                    blank=True, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default='mac2-2.local',
                                                      help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(
                    blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False,
                                                                          help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False,
                                                                           help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, validators=[
                 edc_base.model_validators.date.datetime_not_future], verbose_name='Report date')),
                ('report_date', models.DateField(
                    editable=False, help_text='date value of report_datetime for unique constraint')),
                ('log_status', models.CharField(choices=[('accessible', 'Accessible'), (
                    'inaccessible', 'Inaccessible')], max_length=25, verbose_name='What is the status of this plot?')),
                ('reason', models.CharField(blank=True, choices=[('impassable_road', 'Road is impassable'), ('dogs', 'Dogs prevent access'), (
                    'locked_gate', 'Gate is locked'), ('OTHER', 'Other')], max_length=25, null=True, verbose_name='If inaccessible, please indicate the reason.')),
                ('reason_other', models.CharField(
                    blank=True, max_length=100, null=True, verbose_name='If Other, specify')),
                ('comment', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(
                    blank=True, help_text='IMPORTANT: Do not include any names or other personally identifying information in this comment (Encryption: AES local)', max_length=250, null=True, verbose_name='Comments')),
                ('plot_log', models.ForeignKey(
                    on_delete=django.db.models.deletion.PROTECT, to='plot.PlotLog')),
            ],
            options={
                'ordering': ('report_datetime',),
            },
        ),
        migrations.AlterUniqueTogether(
            name='plot',
            unique_together=set([('gps_target_lat', 'gps_target_lon')]),
        ),
        migrations.AddField(
            model_name='historicalplotlogentry',
            name='plot_log',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True,
                                    on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='plot.PlotLog'),
        ),
        migrations.AddField(
            model_name='historicalplotlog',
            name='plot',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True,
                                    on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='plot.Plot'),
        ),
        migrations.AlterUniqueTogether(
            name='plotlogentry',
            unique_together=set([('plot_log', 'report_datetime')]),
        ),
    ]
